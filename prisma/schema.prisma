// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspaces  WorkspaceUser[]
  projects    Project[]
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       WorkspaceUser[]
  projects    Project[]
}

model WorkspaceUser {
  id          String   @id @default(cuid())
  role        String   @default("member") // owner, admin, member
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  workspaceId String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  estimates   Estimate[]
}

model Estimate {
  id        String   @id @default(cuid())
  title     String
  amount    Decimal
  currency  String   @default("USD")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
